easy;-
import java.util.Scanner;

public class SquareRootCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number: ");
        try {
            double number = Double.parseDouble(scanner.nextLine());

            if (number < 0) {
                throw new ArithmeticException("Cannot calculate the square root of a negative number.");
            }

            double squareRoot = Math.sqrt(number);
            System.out.println("Square Root: " + squareRoot);

        } catch (NumberFormatException e) {
            System.out.println("Error: Please enter a valid numeric value.");
        } catch (ArithmeticException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}


medium;-

import java.util.Scanner;

public class ATMWithdrawalSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String correctPin = "1234";
        double balance = 3000.0;

        System.out.print("Enter PIN: ");
        String enteredPin = scanner.nextLine();

        try {
            if (!enteredPin.equals(correctPin)) {
                throw new SecurityException("Invalid PIN.");
            }

            System.out.print("Withdraw Amount: ");
            double withdrawAmount = Double.parseDouble(scanner.nextLine());

            if (withdrawAmount > balance) {
                throw new IllegalArgumentException("Insufficient balance. Current Balance: " + balance);
            }

            balance -= withdrawAmount;
            System.out.println("Withdrawal successful. Remaining Balance: " + balance);

        } catch (SecurityException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (NumberFormatException e) {
            System.out.println("Error: Please enter a valid numeric amount.");
        }
    }
}

hard:-

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class CourseFullException extends Exception {
    public CourseFullException(String message) {
        super(message);
    }
}

class PrerequisiteNotMetException extends Exception {
    public PrerequisiteNotMetException(String message) {
        super(message);
    }
}

public class UniversityEnrollmentSystem {
    static class Student {
        String name;
        List<String> completedCourses = new ArrayList<>();

        public Student(String name) {
            this.name = name;
        }

        public void addCompletedCourse(String course) {
            completedCourses.add(course);
        }

        public boolean hasCompletedPrerequisite(String prerequisite) {
            return completedCourses.contains(prerequisite);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        Student student = new Student("John Doe");
        student.addCompletedCourse("Core Java"); // Add prerequisite course

        String courseToEnroll = "Advanced Java";
        String prerequisite = "Core Java";
        int maxEnrollment = 2;
        List<String> enrolledStudents = new ArrayList<>();

        try {
            // Simulate checking if the course is full
            if (enrolledStudents.size() >= maxEnrollment) {
                throw new CourseFullException("The course " + courseToEnroll + " is already full.");
            }

            // Check if student meets the prerequisite
            if (!student.hasCompletedPrerequisite(prerequisite)) {
                throw new PrerequisiteNotMetException("Complete " + prerequisite + " before enrolling in " + courseToEnroll + ".");
            }

            enrolledStudents.add(student.name);
            System.out.println("Successfully enrolled in " + courseToEnroll);

        } catch (CourseFullException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (PrerequisiteNotMetException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}


