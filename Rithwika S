import java.util.Scanner;

public class SquareRootCalculator {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        try {
            // Ask the user to input a number
            System.out.print("Enter a number: ");
            String input = scanner.nextLine();
            
            // Parse the input to a double
            double number = Double.parseDouble(input);
            
            // Check if the number is negative
            if (number < 0) {
                throw new IllegalArgumentException("Cannot calculate the square root of a negative number.");
            }
            
            // Calculate the square root
            double squareRoot = Math.sqrt(number);
            
            // Output the result
            System.out.println("The square root of " + number + " is " + squareRoot);
        } catch (NumberFormatException e) {
            System.out.println("Error: Invalid input. Please enter a valid number.");
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("Error: An unexpected error occurred.");
        } finally {
            scanner.close();
        }
    }
}






import java.util.Scanner;

class InvalidPINException extends Exception {
    public InvalidPINException(String message) {
        super(message);
    }
}

class InsufficientBalanceException extends Exception {
    public InsufficientBalanceException(String message) {
        super(message);
    }
}

class ATM {
    private double balance = 1000.00; // Default balance
    private int pin = 1234; // Hardcoded PIN

    // Method to authenticate user
    public void authenticate(int enteredPin) throws InvalidPINException {
        if (enteredPin != pin) {
            throw new InvalidPINException("Error: Invalid PIN. Access denied.");
        }
    }

    // Method to check balance
    public double checkBalance() {
        return balance;
    }

    // Method to withdraw money
    public void withdraw(double amount) throws InsufficientBalanceException {
        if (amount <= 0) {
            System.out.println("Error: Withdrawal amount must be greater than zero.");
        } else if (amount > balance) {
            throw new InsufficientBalanceException("Error: Insufficient balance.");
        } else {
            balance -= amount;
            System.out.println("Withdrawal successful. You withdrew: $" + amount);
        }
    }

    // Method to print a message when the user exits
    public void exit() {
        System.out.println("Thank you for using our ATM. Goodbye!");
    }
}

public class ATMSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ATM atm = new ATM();
        
        // Ask user for PIN
        System.out.print("Enter your PIN: ");
        int enteredPin = scanner.nextInt();
        
        try {
            // Authenticate user
            atm.authenticate(enteredPin);

            // Main ATM menu
            int choice;
            do {
                System.out.println("\nATM Menu:");
                System.out.println("1. Check Balance");
                System.out.println("2. Withdraw Money");
                System.out.println("3. Exit");
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt();
                
                switch (choice) {
                    case 1:
                        // Check balance
                        System.out.println("Your current balance is: $" + atm.checkBalance());
                        break;

                    case 2:
                        // Withdraw money
                        System.out.print("Enter the amount you want to withdraw: $");
                        double amount = scanner.nextDouble();
                        try {
                            atm.withdraw(amount);
                        } catch (InsufficientBalanceException e) {
                            System.out.println(e.getMessage());
                        }
                        break;

                    case 3:
                        // Exit
                        atm.exit();
                        break;

                    default:
                        System.out.println("Error: Invalid option. Please choose a valid option.");
                }
                
                // Show remaining balance
                System.out.println("Remaining balance: $" + atm.checkBalance());

            } while (choice != 3);
            
        } catch (InvalidPINException e) {
            System.out.println(e.getMessage());
        } finally {
            scanner.close();
        }
    }
}








import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Custom exception for when a course is full
class CourseFullException extends Exception {
    public CourseFullException(String message) {
        super(message);
    }
}

// Custom exception for when prerequisites are not met
class PrerequisiteNotMetException extends Exception {
    public PrerequisiteNotMetException(String message) {
        super(message);
    }
}

// Class representing a Course
class Course {
    private String name;
    private int maxEnrollment;
    private List<String> enrolledStudents;
    private String prerequisite;

    public Course(String name, int maxEnrollment, String prerequisite) {
        this.name = name;
        this.maxEnrollment = maxEnrollment;
        this.enrolledStudents = new ArrayList<>();
        this.prerequisite = prerequisite;
    }

    public String getName() {
        return name;
    }

    public String getPrerequisite() {
        return prerequisite;
    }

    public boolean isFull() {
        return enrolledStudents.size() >= maxEnrollment;
    }

    public boolean hasPrerequisite(String completedCourse) {
        return completedCourse.equals(prerequisite);
    }

    public void enrollStudent(String studentName) throws CourseFullException {
        if (isFull()) {
            throw new CourseFullException("Error: " + name + " is full. Cannot enroll " + studentName);
        }
        enrolledStudents.add(studentName);
        System.out.println(studentName + " has been successfully enrolled in " + name);
    }
}

// Class representing a Student
class Student {
    private String name;
    private List<String> completedCourses;

    public Student(String name) {
        this.name = name;
        this.completedCourses = new ArrayList<>();
    }

    public String getName() {
        return name;
    }

    public List<String> getCompletedCourses() {
        return completedCourses;
    }

    public void completeCourse(String courseName) {
        completedCourses.add(courseName);
        System.out.println(name + " has completed " + courseName);
    }

    public boolean hasCompletedPrerequisite(String prerequisite) {
        return completedCourses.contains(prerequisite);
    }
}

public class CourseEnrollmentSystem {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Create courses
        Course coreJava = new Course("Core Java", 2, "");
        Course advancedJava = new Course("Advanced Java", 1, "Core Java");

        // Create student
        Student student = new Student("John Doe");

        // Enroll student in Core Java first
        student.completeCourse("Core Java");

        // Enroll in Advanced Java, but check for prerequisites first
        System.out.println("\nAttempting to enroll in Advanced Java...");
        try {
            if (!student.hasCompletedPrerequisite(advancedJava.getPrerequisite())) {
                throw new PrerequisiteNotMetException("Complete " + advancedJava.getPrerequisite() + " before enrolling in " + advancedJava.getName());
            }
            advancedJava.enrollStudent(student.getName());
        } catch (PrerequisiteNotMetException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (CourseFullException e) {
            System.out.println("Error: " + e.getMessage());
        }

        // Attempt to enroll again in Advanced Java
        System.out.println("\nAttempting to enroll in Advanced Java again...");
        try {
            if (!student.hasCompletedPrerequisite(advancedJava.getPrerequisite())) {
                throw new PrerequisiteNotMetException("Complete " + advancedJava.getPrerequisite() + " before enrolling in " + advancedJava.getName());
            }
            advancedJava.enrollStudent(student.getName());
        } catch (PrerequisiteNotMetException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (CourseFullException e) {
            System.out.println("Error: " + e.getMessage());
        }

        scanner.close();
    }
}

